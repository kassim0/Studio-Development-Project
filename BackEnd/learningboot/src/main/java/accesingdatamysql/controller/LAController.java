package accesingdatamysql.controller;

import accesingdatamysql.entity.LA;
import accesingdatamysql.repository.LARepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.*;

import java.util.ArrayList;
import java.util.List;

@RestController // This means that this class is a Controller
@RequestMapping(path="/LA") // This means URL's start with /demo (after Application path)
public class LAController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private LARepository LARepository;

    @PostMapping(path="/add",
            consumes = {MediaType.APPLICATION_JSON_VALUE},
            produces = {MediaType.APPLICATION_JSON_VALUE}
    ) // Map ONLY POST Requests
    public @ResponseBody String addNewLA(@RequestBody LA a) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        LARepository.save(a);
        return "Saved";
    }

    @GetMapping(path="/all")
    public @ResponseBody Iterable<LA> getAllLA() {
        // This returns a JSON or XML with the users
        return LARepository.findAll();
    }
    @GetMapping(path="/")
    public @ResponseBody LA getLA(@RequestParam String id) {
        // This returns a JSON or XML with the users
        Integer idToSearch= Integer.valueOf(id);
        LA LAToChange = new LA();
        if(LARepository.existsById(idToSearch)){
            LAToChange =LARepository.findById(idToSearch).get();
        };
        return LAToChange;
    }

    @DeleteMapping(path="/delete")
    public @ResponseBody String deleteLA(@RequestParam String name) {
        // This returns a JSON or XML with the users
        Integer idToSearch= Integer.valueOf(LARepository.findByName(name));
        Integer id= Integer.valueOf(idToSearch);
        LA LAToChange = null;
        if(LARepository.existsById(idToSearch)){
            LARepository.deleteById(idToSearch);
            return "deleted";
        };
        return "not found";
    }
    @PutMapping(path="/change")
    public @ResponseBody LA changeLA(@RequestParam String id) {
        // This returns a JSON or XML with the users
        Integer idToSearch= Integer.valueOf(id);
        LA LAToChange;
         if(LARepository.existsById(idToSearch)){
             LAToChange =LARepository.findById(idToSearch).get();
         };
         return null;
    }
    @GetMapping(path="/allByName")
    public @ResponseBody LA getLAByName(@RequestParam String name) {
        // This returns a JSON or XML with the users
        //Course prueba2 = CourseRepository.findByName(name);
        Integer idToSearch= Integer.valueOf(LARepository.findByName(name));
        LA LAToChange = null;
        if(LARepository.existsById(idToSearch)){
            LAToChange =LARepository.findById(idToSearch).get();
        };
        return LAToChange;
    }


}