package accesingdatamysql.controller;
import accesingdatamysql.entity.Course;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import accesingdatamysql.repository.*;

import java.util.Optional;

@Controller // This means that this class is a Controller
@RequestMapping(path="/course") // This means URL's start with /demo (after Application path)
public class CourseController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private CourseRepository CourseRepository;

    @PostMapping(path="/add") // Map ONLY POST Requests
    public @ResponseBody String addNewCourse(@RequestParam String name
            , @RequestParam String email,@RequestParam Integer credits) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        Course n = new Course();
        n.setName(name);
        n.setDefinition(email);
        n.setCredits(credits);
        CourseRepository.save(n);
        return "Saved";
    }

    @GetMapping(path="/all")
    public @ResponseBody Iterable<Course> getAllCourses() {
        // This returns a JSON or XML with the users
        return CourseRepository.findAll();
    }
    @GetMapping(path="/")
    public @ResponseBody Course getCourse(@RequestParam String id) {
        // This returns a JSON or XML with the users
        Integer idToSearch= Integer.valueOf(id);
        Course CourseToChange = null;
        if(CourseRepository.existsById(idToSearch)){
            CourseToChange =CourseRepository.findById(idToSearch).get();
        };
        return CourseToChange;
    }
    @DeleteMapping(path="/delete")
    public @ResponseBody String deleteCourse(@RequestParam String id) {
        // This returns a JSON or XML with the users
        Integer idToSearch= Integer.valueOf(id);
        Course CourseToChange = null;
        if(CourseRepository.existsById(idToSearch)){
            CourseRepository.deleteById(idToSearch);
            return "deleted";
        };
        return "not found";
    }
    @PutMapping(path="/change")
    public @ResponseBody Course changeCourse(@RequestParam String id) {
        // This returns a JSON or XML with the users
        Integer idToSearch= Integer.valueOf(id);
        Course CourseToChange;
         if(CourseRepository.existsById(idToSearch)){
             CourseToChange =CourseRepository.findById(idToSearch).get();
         };


         return null;
    }
}